} # while
# Since we are done, print out some stats and variables just to see what they have
# and cleanup any resources.
#
# Print out the hash map.
# For debugging purposes only!
# TODO: remove this in production
#
#logdebug("*** Printing HashMap keys", logger='btc.bcreader')
#for ( h in ls(blockChainInfo$txRegistry) ){
#      logdebug("HashMap key: [%s]", h, logger='btc.bcreader')
#}
# Important! Cleanup, i.e. close the .dat file we opened.
close(bF)
# Print out some statistics
loginfo("Stats:\n Total blocks read: [%f]\n Cache attempts [%d]\n Cache hits: [%d]\n Success rate: [%f]\n Maximum Tx/block: [%d]\n Total Txs: [%f]\n Coinbase Tx count:[%d]",
blockChainInfo$statistics$blockCount,
blockChainInfo$statistics$lookupAttempts,
blockChainInfo$statistics$lookupHits,
(blockChainInfo$statistics$lookupHits/blockChainInfo$statistics$lookupAttempts),
blockChainInfo$statistics$maxBlockTxCount,
blockChainInfo$statistics$totalTxCount,
blockChainInfo$statistics$coinbaseTxCount,
logger='btc.bcreader')
loginfo("*** Max block read time: [%f] at iteration [%d]", max(blockReadElapsed), which(blockReadElapsed==max(blockReadElapsed)), logger='btc.bcreader')
loginfo("*** Average read time per block: [%f] secs", mean(blockReadElapsed), logger='btc.bcreader')
#TODO: return the proper structure containing the requested blocks
#return(blocks)
}
#
# readBlock
#
# Read an entire block from file
#
# @f: a connection object i.e. a handle to an open file
#
# Return values: the block header and the transactions.
# TODO: some redundant stuff here...needs optimization. Also needs better testing as to whether
# transactions are returned appropriately
#
readBlock<-function(f){
# Initialization - for testing purposes
blkSize<- -9999
blockValid<-TRUE
# Read magic number (=4 bytes)
m<-readBytes(f, 4)
# Convert binary number into decimal.
# That's not useful/needed and we should get rid of it - but anyway
mv<-sum(2^.subset(0:31, as.logical(rawToBits(m))))
# Read size of block - in bytes
bSzBytes<-readBytes(f, 4)
bSz<-sum(2^.subset(0:31, as.logical( rawToBits(bSzBytes))))
# There is one block in file blk00000.dat that looks very strange: has size=0, magic number=0 etc.
# Here we just print our if we have encountered such block.
# However, we need to read that block.
# TODO: Take a closer at this block. Why is it there? Is this normal?
if (bSz == 0){
logdebug(sprintf(">>>> Zero byte block! (%d)", blkSize), logger='btc.bcreader')
blockValid<-FALSE
}
# Read block header
blockHeader<-list()
blockHeader<-readHeader(f)
logdebug("Block hash %s", blockHeader$calcBlockHash, logger='btc.bcreader')
logdebug("Total of %d transactions", as.integer(blockHeader$TxCount), logger='btc.bcreader')
# Read all transactions and add them to a list
blockTx<-list()
for (k in 1:blockHeader$TxCount ){
logdebug("*********** %d) Start transaction ***********", k, logger='btc.bcreader')
# NOTE:  index k is important!
txn<-readTx(f)
#transactionHash<-sha256( sha256(txn$bytes) )
#logdebug("Transaction BYTES: [%s]", paste(txn$bytes, collapse=""), logger='btc.bcreader')
logdebug("Transaction HASH: [%s]", txn$txHash, logger='btc.bcreader' )
logdebug("*********** End transaction ***********", logger='btc.bcreader')
blockTx[[length(blockTx)+1]]<-txn
#myList[[length(myList)+1]] <- list(sample(1:3))
logdebug("-- New blockTx. length=%d", length(blockTx), logger='btc.bcreader')
}
blockHeader[["magicNumber"]] <- paste(rev(m),collapse="")
blockHeader[["blockSize"]]<-bSz
blockHeader[["blockValid"]]<-blockValid
blockHeader[["transactions"]]<-blockTx
# blockHeader<-c(blockHeader, "magicNumber" = paste(rev(m),collapse="") )
# blockHeader<-c(blockHeader, "blockSize"=bSz)
# logdebug("Adding transaction list to list. Length=%d", length(blockTx), logger='btc.bcreader')
# blockHeader<-c(blockHeader, "transactions"=blockTx)
return(blockHeader)
}
#
# readHeader
#
# Read the header of the block (80 bytes)
#
# @f: a connection object i.e. a handle to an open file
#
# Return values: a list containing the block header.
#
# This function calculates also the current block's hash using sha256.
#
# TODO: some redudancies here. Optimize/improve it.
#
readHeader<-function(f){
blkHeader<- "" # TODO: do we need this? don't know. sigh....
# Headers are always 80 bytes in size. Read an entire chunk of 80 bytes
# and "break" it apart to get the various parts. It's in memory and hence faster.
blkHeader<- readBytes(f, 80)
# Calculate the blocks hash.
# For this we pass the block header bytes into sha256 resulting in a 256bit number and pass
# that 256bit number again into sha256. The result will be the block's hash value.
#
# NOTE: You may use this hash value to check the block data by comparing the data read from file with
# data that blockchain.info maintains for a block. To do this, take blockHash value and paste the hash value
# into the following URL:
# https://blockchain.info/block/<paste-block-hash-value-here>
# You should see the block data as maintained by blockchain.info and compare it with the data this script reads
#
blockHash<-sha256( sha256(blkHeader) )
# Now, chop off the various parts from the 80 bytes (=header) that we have read.
# TODO: a lot of redundant variables below. Need to improve/optimize this
# Chop off version
# Reverse bits because of little-endian format
# For more on the endianness discussion see https://el.wikipedia.org/wiki/Endianness
vVec <- rev(blkHeader[1:4])
version<-paste(vVec, collapse="")
# Chop off previous hash
# Reverse bits because of little-endian format
prVec <- rev(blkHeader[5:36])
previousHash <- paste(prVec, collapse="")
# Chop off merkle hash
# Reverse bits because of little-endian format
mrklVec <- rev(blkHeader[37:68])
merkleRoot <- paste(mrklVec, collapse="")
logdebug("Merkle root: [%s]", paste(merkleRoot, collapse=""), logger='btc.bcreader')
# Chop off block timestamp
# We reverse the timestamp bits because integers are stored in little-endian format
tmVec <-rev(blkHeader[69:72])
# Chop off timestamp
# The block's timestamp (=when it was created) is an integer representing an Unix timestamp (see https://en.wikipedia.org/wiki/Unix_time)
# This integer is the time elapsed in seconds from 01-01-1970, a date known as "the Epoch"
# So here we convert the Unix timestamp integer into a datetime. The block reports the timestamp in GMT, hence we do the same here.
timeStamp <- as.POSIXct( hex2dec(paste(tmVec, collapse="")), origin="1970-01-01")
timeStampH <- strftime(timeStamp, "%d/%m/%Y %H:%M:%S", tz="GMT")
# NOTE: Not the actual difficulty but the difficulty bits representing difficulty
# To see how to convert that number (difficulty bits) into difficulty, see https://en.bitcoin.it/wiki/Difficulty
diffVect  <- rev(blkHeader[73:76])
difficulty <- paste(diffVect, collapse="")
# Chop off nonce (i.e. the value that miners search for in order to solve the hash puzzle)
nonceVec <- rev(blkHeader[77:80])
nonce <- paste(nonceVec, collapse="")
# Number of transactions in this block
txCount<- -2
txCountList <- readVariantInteger(f)
if (is.na(txCountList$int)) {
txCount<-1 #we do this for the strange block with all zeroes so that we don't go berzerk.
}else{
txCount<-as.integer(txCountList$int)
}
# Note: please note below that we reverse the blockHash, as it is calculated and displayed in little-endian.
hdr<-list("calcBlockHash"= paste(rev(blockHash), collapse=""), "version"=version, "previousHash"= previousHash,
"merkleRoot"=merkleRoot,
"blockTime"=timeStampH, "difficultyBits"=difficulty, "nonce"=nonce, "TxCount"=txCount)
hdr<-c(hdr, "error" = 0)
return(hdr)
}
#
# readTx
#
# Read one (1) transaction including all its inputs and outputs
#
# @f: a connection object i.e. a handle to an open file
#
# Return values: a list containing the inputs and outputs of that transaction
#
# TODO: redundant variables. Optimize it.
#
readTx<-function(f){
txBytes<-c()
# Transaction version
txVersionNumberV<-readBytes(f, 4)
txBytes<-c(txBytes, txVersionNumberV)
# Not needed but anyway
txVersion<-sum(2^.subset(0:31, as.logical( rawToBits(txVersionNumberV))))
### Read Tx inputs
# How many inputs does the transaction have?
txInputCountList<-readVariantInteger(f)
txInputCount<-as.integer(txInputCountList$int)
txBytes<-c(txBytes, txInputCountList$bytes)
logdebug("=== Reading (%d) inputs in transaction", txInputCount, logger='btc.bcreader')
# Iterate through all inputs, read them and put them in
# a vector.
inTxs<-list()
for (p in 1:txInputCount){
txIn<-readTxInput(f)
txBytes<-c(txBytes, txIn$bytes)
inTxs[[length(inTxs)+1]]<-txIn
}
logdebug("=== Inputs done.", logger='btc.bcreader')
### Read Tx outputs
# How many outputs does the transaction have?
txOutCountList<-readVariantInteger(f)
txOutCount<-as.integer(txOutCountList$int)
txBytes<-c(txBytes, txOutCountList$bytes)
logdebug("+++ Reading (%d) OUTPUTS in transaction", txOutCount, logger='btc.bcreader')
# Iterate through all outputs, read them and put them in
# a vector.
outTxs<-list()
for (p in 1:txOutCount){
txOut<-readTxOutput(f)
txBytes<-c(txBytes, txOut$bytes)
outTxs[[length(outTxs)+1]]<-txOut
}
logdebug("+++ OUTPUTS done.", logger='btc.bcreader')
# The last piece of the transaction to read is the locktime. Read it and we are done.
# locktime: lock transactions from being considered valid(?) until you reach a certain
# amount of blockchain hight or some amount of time. I.e. allows you to make tx valid after
# some point in time.
# NOTE: if locktime is < 500000000 then its interpreted as block height. if locktime >500000000 then
# its interpreted as a UNIX timestamp (epoch).
# TODO: check the above
lckTm<-readBytes(f, 4)
txBytes<-c(txBytes, lckTm)
# Next is unnecessary as of now, but we'll need it later anyway...
lockTime<-sum(2^.subset(0:31, as.logical( rawToBits(lckTm))))
# Now, calculate hash for the transaction we just read
cTxHash<-sha256( sha256(txBytes) )
return( list("txInCount"=txInputCount, "txInputs"=inTxs, "txOutCount"=txOutCount, "txOutputs"=outTxs, "txHash"=paste(rev(cTxHash), collapse=""), "bytes"=txBytes) )
}
#
# readTxInput
#
# Read one (1) INPUT of a transaction
#
# @f: a connection object i.e. a handle to an open file
#
# Return values: a list containing ONE INPUT in a transaction
#
# TODO: redundant variables. Optimize it.
#
readTxInput<-function(f){
inTxBytes<-c()
#Hash of previous transaction
txPHash<-readBytes(f, 32)
inTxBytes<-c(inTxBytes, txPHash)
logdebug(" Previous input Tx: previous hash=%s", paste(rev(txPHash), collapse=""), logger='btc.bcreader')
#Specific output in the referenced transaction
#TODO: check if this number is little- or big-endian.
outIdx<-readBytes(f, 4)
# Please note the following here: this is a little-endian number
# but we convert it to decimal by traversing it from left- to right hence
# intepreting it in a little-endian way. That way, we don't need to reverse the bytes.
outputIndex<-sum(2^.subset(0:31, as.logical(rawToBits( outIdx) )))
logdebug("prev hash: [%s] Output index little-endian:[%f]", paste(rev(txPHash), collapse=""), outputIndex, logger='btc.bcreader')
inTxBytes<-c(inTxBytes, outIdx)
scriptLenList<-readVariantInteger(f)
scriptLen<-as.integer(scriptLenList$int)
inTxBytes<-c(inTxBytes, scriptLenList$bytes)
logdebug(" Script length=%d", scriptLen, logger='btc.bcreader')
#First half of script (ScriptSig)
# unlocking script: unlocks the previous unspend output!
unlockScript<-readBytes(f, scriptLen)
inTxBytes<-c(inTxBytes, unlockScript)
logdebug(" Unlockscript=%s", paste(unlockScript, collapse=""), logger='btc.bcreader')
# If maxed out (i.e. has max value) then ignore locktime. Otherwise take into
# consideration locktime
# TODO: check if this is really so.
seqNo<-readBytes(f, 4)
inTxBytes<-c(inTxBytes, seqNo)
return(list("txPreviousHash"=paste(rev(txPHash), collapse=""), "txInputOutIdx"=outputIndex, "txInScriptLen"=scriptLen, "txInScript"=unlockScript, "txInSequence"=seqNo, "bytes"=inTxBytes))
}
#
# readTxOutput
#
# Read one (1) OUTPUT of a transaction
#
# @f: a connection object i.e. a handle to an open file
#
# Return values: a list containing ONE OUTPUT found in a transaction
#
# TODO: redundant variables. Optimize it.
#
readTxOutput<-function(f){
outTxBytes<-c()
# Amount of transaction, in Satoshis.
# Note: 1 bitcoin = 100000000 Satoshis
txA<-readBytes(f, 8)
outTxBytes<-c(outTxBytes, txA)
txAmount<-sum(2^.subset(0:63, as.logical( rawToBits(txA))))
logdebug("Tx output amount: %f", txAmount, logger='btc.bcreader')
outScriptLenList<-readVariantInteger(f)
outScriptLen<-as.integer(outScriptLenList$int)
outTxBytes<-c(outTxBytes, outScriptLenList$bytes)
#ScriptPubKey
outScript<-readBytes(f, outScriptLen)
outTxBytes<-c(outTxBytes, outScript)
# Try to execute script
# TODO: experimental. Needs to be checked
execScript(outScript)
#
# The outscript has to be decoded.
# Take a look at this
# https://www.siliconian.com/blog/16-bitcoin-blockchain/22-deconstructing-bitcoin-transactions
# which might give ideas
# Check script.
# TODO: this is experimental
handleOutput( outScript )
return(list("txOutAmount"=txAmount, "txOutScriptLength"=outScriptLen, "txOutScript"=outScript, "bytes"=outTxBytes))
}
#
# Experimental: what kind of TX this is
# TODO: prototype; complete-fixme
#
handleOutput<-function(outScript){
logdebug("Checking type of ScriptPubKey (locking script):[%s]", paste(outScript, collapse=""), logger='btc.bcreader')
if ( outScript[1] == "fe")
logdebug("TYPE? Pay to Public Key Tx", logger='btc.bcreader')
else if ( outScript[1] == "76" )
logdebug("TYPE? Pay to Address Tx", logger='btc.bcreader')
else if ( outScript[1] == "a9" )
logdebug("TYPE? Pay to Script Hash Tx", logger='btc.bcreader')
else  if ( outScript[1] == "6a" )
logdebug("TYPE? NULL DATA Tx", logger='btc.bcreader')
else
logdebug("TYPE? NON STANDARD OR MULTISIG Tx (%s)", outScript[1], logger='btc.bcreader')
}
handleTx<-function(tx, txRecord, txRS){
inputAmount<-0.0
#iterate through all inputs of this Transactions
for (inp in tx$txInputs){
#list("txPreviousHash"=txHash, "txInputOutIdx"=outIdx, "txInScriptLen"=scriptLen, "txInScript"=unlockScript, "txInSequence"=seqNo, "bytes"=inTxBytes)
if (inp$txPreviousHash != '0000000000000000000000000000000000000000000000000000000000000000') {
#signal a new lookup
txRS$newLookup()
#search for previous transaction in cache/registry
pFound<-txRecord[[inp$txPreviousHash]]
# did we find previous transaction?
if (is.null(pFound) ){
# no. This means we cannot yet calculate fees.
logdebug("Previous Tx [%s] NOT FOUND in registry", inp$txPreviousHash, logger='btc.bcreader')
return()
} else {
# yes. Signal that we got a hit in the registry
txRS$newHit()
logdebug("Previous Tx [%s] ==FOUND== in registry. Prev Tx Output count: [%d] Input index [%d (%d)].", inp$txPreviousHash, pFound$txOutCount, inp$txInputOutIdx, as.integer(inp$txInputOutIdx) +1, logger='btc.bcreader')
# ok, now use the output index to locate the exact output of the previous transaction that's
# the current input
spendOutput<-pFound$txOutputs[[ as.integer(inp$txInputOutIdx)+1L]]
# found. Get the amount.
spendAmount<-spendOutput$txOutAmount
logdebug("Previous Tx [%s] ==FOUND== in registry. Prev Tx Output count: [%d] Input index [%d]. Amount [%f]", inp$txPreviousHash, pFound$txOutCount, inp$txInputOutIdx, spendAmount, logger='btc.bcreader')
# add it to calculate total input amount
inputAmount<-inputAmount + spendAmount
}
} else {
# looks like a coinbase (i.e. generate coin) transaction
# TODO: make sure we got conditions right!
txRS$newCoinbaseTx(0)
return()
}
} #for
# At this point we have calculate the total input amount.
# Calculate now the total output amount.
outputAmount<-0.0
for (outp in tx$txOutputs){
outputAmount<-outputAmount + outp$txOutAmount
}
# the difference will be the fees
feeAmount<-inputAmount - outputAmount
logdebug(">>> Tx [%s] input amount: [%f] output amount [%f]. Fee amount [%f]", tx$txHash, inputAmount, outputAmount, feeAmount, logger='btc.bcreader')
}
#
# Experimental: trying some kind of stack based interpreter for input and output scripts
# TODO: prototype; complete-fix me
#
execScript<-function(script){
cpos<-1
while (TRUE){
if (length(script) <= cpos)
break
logdebug("Checking: [%s]", script[cpos], logger='btc.bcreader')
if ( h2d(script[cpos])>=1 &&  h2d(script[cpos])<=75 ) {
logdebug("byte data to push read: [%f]", h2d(script[cpos]), logger='btc.bcreader')
address<-script[cpos+1:(cpos+as.integer(h2d(script[cpos])) -1)]
logdebug(">>>address: [%s]", paste(address, collapse=""), logger='btc.bcreader')
cpos<-cpos+h2d(script[cpos])
return()
} else {
switch( as.character(script[cpos]),
"4c" = {
#cpos<-cpos+1
nb<-script[cpos]
nbytes<-h2d(nb)
cpos<-cpos+1
pushData<-script[cpos:(cpos+nbytes-1)]
cpos<-cpos+nbytes
return()
},
"4d" = {
nb<-paste(script[cpos:(cpos+1)], collapse="")
nbytes<-h2d(nb)
cpos<-cpos + 2
pushData<-script[cpos:(cpos+nbytes-1)]
cpos<-cpos+nbytes
return()
},
"76" = {
cpos<-cpos + 1
},
"a9" = {
cpos <- cpos + 1
address<-script[cpos:(cpos+20-1)]
logdebug(">>>P2PKH address: [%s]", paste(address, collapse=""), logger='btc.bcreader')
},
{
cpos<-cpos+1
}
)
}
} #while
}
#
#
# Execution/testing of above code starts here.
#
#
#
# First, we configure/prepare logging
#
#
# Configure and reset the root logger.
# Calling these function in that sequence, is important to make all handlers to
# work properly
basicConfig()
logReset()
#
# Create a new logger that we'll use in our application.
# We call out logger btc.bcreader. PLEASE USE THIS as argument to call any logdebug, loginfo, logwarn, logerror
# Otherwise, messages will not appear
#
btcL<-getLogger('btc.bcreader')
# We add 2 handlers to logger: one for writing to the console and one for writing to a file
# This essentialy means that everything that is shown in the console is also written into a file!
btcL$addHandler(writeToConsole, logger='btc.bcreader', level='DEBUG')
# TODO: CHANGE file TO POINT TO A FILE IN YOUR SYSTEM!
btcL$addHandler(writeToFile, logger='btc.bcreader', file="C:\\Users\\stathis\\Desktop\\diplwmatikh\\bcReader.log", level='DEBUG')
#Set the debug level
# NOTE: The following debug levels are supported:
# DEBUG, INFO, WARN, ERROR.  Setting it to DEBUG means print
# all messages. Setting it to INFO means show INFO, WARN and ERROR messages i.e. no DEBUG.
# Setting it to WARN, only WARN and ERROR messages will be shown/logged
debugLevel = 'DEBUG'
setLevel(debugLevel, container='btc.bcreader')
setwd("C:\\Users\\Stathis\\Desktop\\diplwmatikh")
#Set the debug level
# NOTE: The following debug levels are supported:
# DEBUG, INFO, WARN, ERROR.  Setting it to DEBUG means print
# all messages. Setting it to INFO means show INFO, WARN and ERROR messages i.e. no DEBUG.
# Setting it to WARN, only WARN and ERROR messages will be shown/logged
debugLevel = 'INFO'
setLevel(debugLevel, container='btc.bcreader')
Rprof("OUT160.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00028.dat",160)
Rprof()
summaryRprof("OUT160.out",memory = "both")
Rprof("OUT160.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",160)
Rprof()
summaryRprof("OUT160.out",memory = "both")
setwd("C:\\Users\\Stathis\\Dropbox\\LAPTOP\\diplwmatikh")
#Set the debug level
# NOTE: The following debug levels are supported:
# DEBUG, INFO, WARN, ERROR.  Setting it to DEBUG means print
# all messages. Setting it to INFO means show INFO, WARN and ERROR messages i.e. no DEBUG.
# Setting it to WARN, only WARN and ERROR messages will be shown/logged
debugLevel = 'WARN'
setLevel(debugLevel, container='btc.bcreader')
Rprof("OUT160v2.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",160)
Rprof("OUT320.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",320)
Rprof()
summaryRprof("OUT320.out",memory = "both")
Rprof("OUT80.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",80)
Rprof()
summaryRprof("OUT80.out",memory = "both")
Rprof("OUT40.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",40)
Rprof()
summaryRprof("OUT40.out",memory = "both")
Rprof("OUT20.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",20)
Rprof()
summaryRprof("OUT20.out",memory = "both")
Rprof("OUT20.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",20)
Rprof()
summaryRprof("OUT20.out",memory = "both")
Rprof("OUT20.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",20)
Rprof()
summaryRprof("OUT20.out",memory = "both")
Rprof("OUT20.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",20)
Rprof()
summaryRprof("OUT20.out",memory = "both")
Rprof("OUT640.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",640)
Rprof()
summaryRprof("OUT640.out",memory = "both")
Rprof("OUTall29.out",append=F,memory.profiling = TRUE)
readBlockChainFile("C:\\Users\\stathis\\Desktop\\diplwmatikh\\Blockchain-files\\blk00029.dat",-1)
